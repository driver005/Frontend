{
  "name": "react-stripe-menu",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@amcharts/amcharts4": "^4.10.15",
    "@amcharts/amcharts4-geodata": "^4.1.19",
    "@apollo/client": "^3.3.15",
    "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": "^7.13.12",
    "@fullcalendar/core": "^5.5.1",
    "@fullcalendar/daygrid": "^5.5.0",
    "@fullcalendar/interaction": "^5.5.0",
    "@fullcalendar/list": "^5.5.0",
    "@fullcalendar/react": "^5.5.0",
    "@fullcalendar/timegrid": "^5.5.1",
    "@material-ui/core": "^4.11.3",
    "@material-ui/icons": "^4.11.2",
    "apexcharts": "^3.25.0", //
    "apollo-server": "^2.23.0",
    "axios": "^0.21.1",
    "babel-plugin-polyfill-corejs3": "^0.1.7",
    "babel-plugin-polyfill-regenerator": "^0.1.6",
    "bootstrap": "^4.6.0",
    "classnames": "^2.2.6", 
    "cross-spawn": "^6.0.5", //
    "css-modules": "^0.3.0", //
    "dompurify": "^2.2.8", 
    "echarts": "^5.0.2", 
    "echarts-for-react": "^3.0.0",
    "framer-motion": "^4.1.17",
    "glyphicons-halflings": "^1.9.1", //
    "graphql": "^15.5.0", 
    "highcharts": "^9.0.0", //
    "highcharts-react-official": "^3.0.0", //
    "identicon": "^3.0.1", //
    "identicon.js": "^2.3.3", //
    "jwt-decode": "^3.1.2",
    "line-awesome": "^1.3.0", //
    "marked": "^2.0.4",
    "material-ui": "^0.20.0", 
    "moment": "^2.29.1", 
    "normalize.css": "latest", //
    "rc-hammerjs": "^0.6.10",
    "react": "latest",
    "react-alert-template-basic": "^1.0.0",
    "react-animated-number": "^0.4.4",
    "react-apexcharts": "^1.3.7", //
    "react-bootstrap": "^1.5.2",
    "react-datepicker": "^3.6.0",
    "react-dom": "latest",
    "react-file-base64": "^1.0.3",
    "react-flip-move": "^3.0.4",
    "react-flip-toolkit": "^7.0.13",
    "react-google-maps": "^9.4.5",
    "react-hook-form": "^6.15.1",
    "react-icons": "^4.2.0",
    "react-intersection-observer": "^8.31.0",
    "react-modal": "^3.12.1",
    "react-nprogress": "^0.1.6",
    "react-progress-bar": "^0.1.0", //
    "react-redux": "^7.2.2",
    "react-router-dom": "^5.2.0",
    "react-scripts": "^4.0.3",
    "react-toastify": "^7.0.3",
    "react-transition-group": "^4.4.1",
    "redux": "^4.0.5",
    "redux-thunk": "^2.3.0",
    "styled-components": "latest",
    "subscriptions-transport-ws": "^0.9.18",
    "uuid": "^8.3.2",
    "web-vitals": "^1.1.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject",
    "predeploy": "yarn run build",
    "deploy": "gh-pages -d build"
  },
  "devDependencies": {
    "babel-core": "latest",
    "babel-runtime": "latest",
    "gh-pages": "latest"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

import React from 'react';
import { Card, CardActions, CardContent, CardMedia, Button, Typography } from '@material-ui/core/';
import {FiThumbsUp} from 'react-icons/fi';
import {MdDelete} from 'react-icons/md';
import {FiMoreHorizontal} from 'react-icons/fi';
import moment from 'moment';
import { useDispatch } from 'react-redux';

import { likePost, deletePost } from '../../../../../actions/posts';
import useStyles from './styles';

const Post = ({ post, setCurrentId }) => {
  const dispatch = useDispatch();
  const classes = useStyles();

  const user = JSON.parse(localStorage.getItem('profile'));
  const Likes = () => {
    if (post.likes?.length > 0) {
      return post.likes.includes(user?.info?.user?._id)
        ? (
          <React.Fragment><FiThumbsUp fontSize="small" size={20} style={{marginRight: '2px',fill: '##00000061', stroke: '#324db5'}} /><span className={classes.cardActionsText}>{post.likes?.length > 2 ? `You and ${post.likes?.length - 1} others` : `${post.likes.length} like${post.likes.length > 1 ? 's' : ''}` }</span></React.Fragment>
        ) : (
          <React.Fragment><FiThumbsUp fontSize="small" size={15} style={{marginRight: '2px'}} /><span className={classes.cardActionsText}>{post.likes.length} {post.likes.length === 1 ? 'Like' : 'Likes'}</span></React.Fragment>
        );
    } else {
      return <React.Fragment><FiThumbsUp fontSize="small" size={15} style={{marginRight: '2px'}} /><span className={classes.cardActionsText}>Like</span></React.Fragment>;
    }

    
  };

  return (
    <Card className={classes.card} style={{ background: '#ec7f7f12' }}>
      
      <div className={classes.mediaWrapper}>
        <CardMedia className={classes.media} image={post.selectedFile || 'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'} title={post.title} />
      </div>
      <div className={classes.overlay}>
        <Typography variant="h6">{post.creatorName}</Typography>
        <Typography variant="body2">{moment(post.createdAt).fromNow()}</Typography>
      </div>
      {(user?.info?.user?._id === post?.creator) && (
        <div className={classes.overlay2}>
          <Button style={{ color: 'white' }} size="small" onClick={() => setCurrentId(post._id)}><FiMoreHorizontal size={25} /></Button>
        </div>
        )}
      <div className={classes.details}>
        <Typography variant="body2" color="primary" component="h2">{post.tags.map((tag) => `#${tag} `)}</Typography>
      </div>
      <Typography className={classes.title} color="primary" gutterBottom variant="h5" component="h2">{post.title}</Typography>
      <CardContent>
        <Typography variant="body2" color="primary" component="p">{post.message}</Typography>
      </CardContent>
      <CardActions className={classes.cardActions}>
        <Button size="small" color="primary" disabled={!user?.info?.user} onClick={() => dispatch(likePost(post._id))}><Likes /></Button>
        {(post.link) && (
          <a href={post.link}><Button variant="outlined" color="primary">Open Website</Button></a>
        )}
        {(user?.info?.user?._id === post?.creator) && (
          <Button size="small" color="primary" onClick={() => dispatch(deletePost(post._id))}><MdDelete size={15}  /> <span className={classes.cardActionsText}>Delete</span></Button>
        )}
      </CardActions>
    </Card>
  );
};

export default Post;
